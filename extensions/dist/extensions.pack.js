/*
Copyright 2008 Google Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
geo={isnamespace_:true};if(!("map" in Array.prototype)){Array.prototype.map=function(e){var a=this.length;if(typeof e!="function"){throw new TypeError("map() requires a mapping function.")}var d=new Array(a);var c=arguments[1];for(var b=0;b<a;b++){if(b in this){d[b]=e.call(c,this[b],b,this)}}return d}}geo.ALTITUDE_CLAMP_TO_GROUND=0;geo.ALTITUDE_RELATIVE_TO_GROUND=1;geo.ALTITUDE_ABSOLUTE=2;geo.math={isnamespace_:true};if(!("toRadians" in Number.prototype)){Number.prototype.toDegrees=function(){return this*180/Math.PI}}if(!("toRadians" in Number.prototype)){Number.prototype.toRadians=function(){return this*Math.PI/180}}geo.math.normalizeAngle=function(a){a=a%(2*Math.PI);return a>=0?a:a+2*Math.PI};geo.math.reverseAngle=function(a){return geo.math.normalizeAngle(a+Math.PI)};geo.math.EARTH_RADIUS=6378135;geo.math.EARTH_RADIUS_CURVATURE_AVG=6372795;geo.math.distance=function(b,a){return geo.math.EARTH_RADIUS*geo.math.angularDistance(b,a)};geo.math.angularDistance=function(g,f){var e=g.lat.toRadians();var c=f.lat.toRadians();var d=(f.lat-g.lat).toRadians();var b=(f.lng-g.lng).toRadians();var a=Math.pow(Math.sin(d/2),2)+Math.cos(e)*Math.cos(c)*Math.pow(Math.sin(b/2),2);return 2*Math.atan2(Math.sqrt(a),Math.sqrt(1-a))};geo.math.heading=function(f,d){var c=f.lat.toRadians();var b=d.lat.toRadians();var e=Math.cos(b);var a=(d.lng-f.lng).toRadians();return geo.math.normalizeAngle(Math.atan2(Math.sin(a)*e,Math.cos(c)*Math.sin(b)-Math.sin(c)*e*Math.cos(a))).toDegrees()};geo.math.bearing=geo.math.heading;geo.math.midpoint=function(l,i,p){if(geo.util.isUndefined(p)||p===null){p=0.5}var m=l.lat.toRadians();var j=i.lat.toRadians();var g=l.lng.toRadians();var f=i.lng.toRadians();var c=Math.cos(m);var a=Math.cos(j);var o=geo.math.angularDistance(l,i);var e=Math.sin(o);var d=Math.sin((1-p)*o)/e;var b=Math.sin(p*o)/e;var n=d*c*Math.cos(g)+b*a*Math.cos(f);var k=d*c*Math.sin(g)+b*a*Math.sin(f);var h=d*Math.sin(m)+b*Math.sin(j);return new geo.Point(Math.atan2(h,Math.sqrt(Math.pow(n,2)+Math.pow(k,2))).toDegrees(),Math.atan2(k,n).toDegrees())};geo.math.destination=function(h,j){if(!("heading" in j&&"distance" in j)){throw new TypeError("destination() requres both heading and distance options.")}var g=h.lat.toRadians();var d=h.lng.toRadians();var e=Math.sin(g);var i=j.distance/geo.math.EARTH_RADIUS;var a=j.heading.toRadians();var c=Math.sin(i);var b=Math.cos(i);var f=Math.asin(e*b+Math.cos(g)*c*Math.cos(a));return new geo.Point(f.toDegrees(),Math.atan2(Math.sin(a)*c*Math.cos(f),b-e*Math.sin(f)).toDegrees()+h.lng)};geo.Path=function(){this.coords_=[];var a=null;var b;if(arguments.length==1){var d=arguments[0];if(d.constructor===geo.Path){for(b=0;b<d.numCoords();b++){this.coords_.push(new geo.Point(d.coord(b)))}}else{if(geo.util.isArray(d)){if(!d.length||geo.util.isArray(d[0])){a=d}else{a=[d]}}else{if(geo.util.isEarthAPIObject_(d)){var c=d.getType();if(c=="KmlLineString"||c=="KmlLinearRing"){var e=d.getCoordinates().getLength();for(b=0;b<e;b++){this.coords_.push(new geo.Point(d.getCoordinates().get(b)))}}else{throw new TypeError("Could not create a path from the given arguments")}}else{throw new TypeError("Could not create a path from the given arguments")}}}}else{a=arguments}if(a){for(b=0;b<a.length;b++){this.coords_.push(new geo.Point(a[b]))}}};geo.Path.prototype.coords_=null;geo.Path.prototype.toString=function(){return"["+this.coords_.map(function(a){return a.toString()}).join(", ")+"]"};geo.Path.prototype.equals=function(b){for(var a=0;a<b.numCoords();a++){if(!this.coord(a).equals(b.coord(a))){return false}}return true};geo.Path.prototype.numCoords=function(){return this.coords_.length};geo.Path.prototype.coord=function(a){return this.coords_[a]};geo.Path.prototype.prepend=function(a){this.coords_.unshift(new geo.Point(a))};geo.Path.prototype.append=function(a){this.coords_.push(new geo.Point(a))};geo.Path.prototype.insert=function(a,b){this.coords_.splice(a,0,new geo.Point(b))};geo.Path.prototype.remove=function(a){this.coords_.splice(a,1)};geo.Path.prototype.subPath=function(b,a){return this.coords_.slice(b,a)};geo.Path.prototype.distance=function(){var b=0;for(var a=0;a<this.coords_.length-1;a++){b+=this.coords_[a].distance(this.coords_[a+1])}return b};geo.Path.prototype.containsPoint=function(b){var e=false;var f=b.lat;var a=b.lng;for(var d=0;d<this.coords_.length;d++){var c=(d+1)%this.coords_.length;if(((this.coords_[d].lat<f&&this.coords_[c].lat>=f)||(this.coords_[c].lat<f&&this.coords_[d].lat>=f))&&(this.coords_[d].lng+(f-this.coords_[d].lat)/(this.coords_[c].lat-this.coords_[d].lat)*(this.coords_[c].lng-this.coords_[d].lng)<a)){e=!e}}return e};geo.Point=function(){var b=null;if(arguments.length==1){var a=arguments[0];if(a.constructor===geo.Point){this.lat=a.lat;this.lng=a.lng;this.altitude=a.altitude;this.altitudeMode=a.altitudeMode}else{if(geo.util.isArray(a)){b=a}else{if(geo.util.isEarthAPIObject_(a)){var c=a.getType();if(c=="KmlPoint"||c=="KmlLookAt"){this.lat=a.getLatitude();this.lng=a.getLongitude();this.altitude=a.getAltitude();this.altitudeMode=a.getAltitudeMode()}else{if(c=="KmlCoord"||c=="KmlLocation"){this.lat=a.getLatitude();this.lng=a.getLongitude();this.altitude=a.getAltitude()}else{throw new TypeError("Could not create a point from the given Earth object")}}}else{throw new TypeError("Could not create a point from the given arguments")}}}}else{b=arguments}if(b){this.lat=b[0];this.lng=b[1];if(b.length>=3){this.altitude=b[2];if(b.length>=4){this.altitudeMode=b[3]}}}};geo.Point.prototype.lat=0;geo.Point.prototype.lng=0;geo.Point.prototype.altitude=0;geo.Point.prototype.altitudeMode=geo.ALTITUDE_RELATIVE_TO_GROUND;geo.Point.prototype.toString=function(){return"("+this.lat.toString()+", "+this.lng.toString()+", "+this.altitude.toString()+")"};geo.Point.prototype.equals=function(a){return this.lat==a.lat&&this.lng==a.lng&&this.altitude==a.altitude&&this.altitudeMode==a.altitudeMode};geo.Point.prototype.angularDistance=function(a){return geo.math.angularDistance(this,a)};geo.Point.prototype.distance=function(a){return geo.math.distance(this,a)};geo.Point.prototype.heading=function(a){return geo.math.heading(this,a)};geo.Point.prototype.midpoint=function(a,b){return geo.math.midpoint(this,a,b)};geo.Point.prototype.destination=function(a){return geo.math.destination(this,a)};geo.Polygon=function(){this.innerBoundaries_=[];var b;if(arguments.length===0){this.outerBoundary_=new geo.Path()}else{if(arguments.length==1){var d=arguments[0];if(d.constructor===geo.Polygon){this.outerBoundary_=new geo.Path(d.outerBoundary());for(b=0;b<d.innerBoundaries().length;b++){this.innerBoundaries_.push(new geo.Path(d.innerBoundaries()[b]))}}else{if(geo.util.isEarthAPIObject_(d)){var c=d.getType();if(c=="KmlLineString"||c=="KmlLinearRing"){this.outerBoundary_=new geo.Path(d)}else{if(c=="KmlPolygon"){this.outerBoundary_=new geo.Path(d.getOuterBoundary());var a=d.getInnerBoundaries().getChildNodes();var e=a.getLength();for(b=0;b<e;b++){this.innerBoundaries_.push(new geo.Path(a.item(b)))}}else{throw new TypeError("Could not create a polygon from the given arguments")}}}else{this.outerBoundary_=new geo.Path(arguments[0])}}}else{if(arguments[0].length&&typeof arguments[0][0]=="number"){this.outerBoundary_=new geo.Path(arguments)}else{if(arguments[1]){this.outerBoundary_=new geo.Path(arguments[0]);if(!geo.util.isArray(arguments[1])){throw new TypeError("Second argument to geo.Polygon constructor must be an array of paths.")}for(b=0;b<arguments[1].length;b++){this.innerBoundaries_.push(new geo.Path(arguments[1][b]))}}else{throw new Error("Cannot create a path from the given arguments.")}}}}};geo.Polygon.prototype.outerBoundary_=null;geo.Polygon.prototype.innerBoundaries_=null;geo.Polygon.prototype.toString=function(){return"Polygon: "+this.outerBoundary().toString()+(this.innerBoundaries().length?", ("+this.innerBoundaries().length+" inner boundaries)":"")};geo.Polygon.prototype.outerBoundary=function(){return this.outerBoundary_};geo.Polygon.prototype.innerBoundaries=function(){return this.innerBoundaries_};geo.Polygon.prototype.containsPoint=function(a){if(!this.outerBoundary_.containsPoint(a)){return false}for(var b=0;b<this.innerBoundaries_.length;b++){if(this.innerBoundaries_[b].containsPoint(a)){return false}}return true};geo.util={isnamespace_:true};geo.util.isUndefined=function(a){return typeof a=="undefined"};geo.util.isArray=function(a){return a!==null&&typeof a=="object"&&"splice" in a&&"join" in a};geo.util.isFunction=function(a){return a!==null&&typeof a=="function"&&"call" in a&&"apply" in a};geo.util.isObjectLiteral=function(a){return a!==null&&typeof a=="object"&&a.constructor===Object};geo.util.isEarthAPIObject_=function(a){return a!==null&&typeof a=="function"&&"getType" in a};
/*
Copyright 2008 Google Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
var GEarthExtensions=function(a){this.pluginInstance=a;function d(e,f){return function(){return e.apply(f,arguments)}}var c=this;function b(e,f){for(mstr in e){member=e[mstr];if(geo.util.isFunction(member)&&!member.isclass_){e[mstr]=d(member,f)}if(GEarthExtensions.isExtensionsNamespace_(member)){b(member,f)}}}b(this,this)};GEarthExtensions.parseColor=function(a){if(geo.util.isArray(a)){var b=function(c){return((c.length<2)?"0":"")+c};return b(((a.length>=4)?a[3].toString(16):"ff"))+b(a[2].toString(16))+b(a[1].toString(16))+b(a[0].toString())}else{if(typeof a=="string"){if(a.length>7){return a}else{if(a.length>4){return a.replace(/#?([0-9a-f]{2})([0-9a-f]{2})([0-9a-f]{2})/i,"ff$3$2$1").toLowerCase()}else{return a.replace(/#?([0-9a-f])([0-9a-f])([0-9a-f])/i,"ff$3$3$2$2$1$1").toLowerCase()}}}}};GEarthExtensions.AUTO=Infinity;GEarthExtensions.ALLOWED=null;GEarthExtensions.REQUIRED=undefined;GEarthExtensions.checkParameters=function(a,e,b){var d={};a=a||{};b=b||{};for(member in a){if(!e&&!(member in b)){var c=[];for(m in b){c.push(m)}throw new Error("Unexpected parameter '"+member+"'. Allowed parameters are: "+c.join(", ")+".")}d[member]=a[member]}for(member in b){if(!(member in d)){if(b[member]===GEarthExtensions.REQUIRED){throw new Error("Required parameter '"+member+"' was not passed.")}if(b[member]!=GEarthExtensions.ALLOWED&&b[member]!=GEarthExtensions.AUTO){d[member]=b[member]}}}return d};GEarthExtensions.createClass_=function(){var a=[];var c=null;if(geo.util.isArray(arguments[0])){a=arguments[0];c=arguments[1]}else{c=arguments[0]}c.isclass_=true;for(var d=0;d<a.length;d++){for(var b in a[d].prototype){c.prototype[b]=a[d].prototype[b]}}return c};GEarthExtensions.isExtensionsNamespace_=function(a){return a!==null&&typeof a=="object"&&"isnamespace_" in a&&member.isnamespace_};GEarthExtensions.isInstanceOfEarthInterface=function(a,b){return a!==null&&typeof a=="function"&&"getType" in a&&a.getType()==b};GEarthExtensions.prototype.dom={isnamespace_:true};GEarthExtensions.domBuilder_=function(d){if(d.apiInterface&&!geo.util.isArray(d.apiInterface)){d.apiInterface=[d.apiInterface]}var b=d.base;while(b){if("propertySpec" in b.builderParams){if(!("propertySpec" in d)){d.propertySpec=[]}for(member in b.builderParams.propertySpec){if(!(member in d.propertySpec)){d.propertySpec[member]=b.builderParams.propertySpec[member]}}}if(!d.apiInterface){d.apiInterface=b.builderParams.apiInterface}if(!d.apiFactoryFn){d.apiFactoryFn=b.builderParams.apiFactoryFn}b=b.builderParams.base}var c={id:""};for(member in c){if(!(member in d.propertySpec)){d.propertySpec[member]=c[member]}}var a=function(){var g={};var h;if(arguments.length===0){throw new TypeError("Cannot create object without any arguments!")}else{if(arguments.length==1){for(h=0;h<d.apiInterface.length;h++){if(GEarthExtensions.isInstanceOfEarthInterface(arguments[0],d.apiInterface[h])){return arguments[0]}}var e=arguments[0];if(geo.util.isObjectLiteral(e)){g=e}else{if("defaultProperty" in d){g[d.defaultProperty]=e}else{throw new TypeError("Expected options object")}}}else{if(arguments.length==2){if("defaultProperty" in d){g=arguments[1];g[d.defaultProperty]=arguments[0]}else{throw new Error("No default property for the DOM builder")}}}}g=GEarthExtensions.checkParameters(g,false,d.propertySpec);var f=this.pluginInstance[d.apiFactoryFn].call(this.pluginInstance,g.id);if(!geo.util.isUndefined(d.constructor)){d.constructor.call(this,f,g)}b=d.base;while(b){if("constructor" in b.builderParams){b.builderParams.constructor.call(this,f,g)}b=b.builderParams.base}for(property in d.propertySpec){if(d.propertySpec[property]===GEarthExtensions.AUTO&&property in g){f["set"+property.substr(0,1).toUpperCase()+property.substr(1)].call(f,g[property])}}return f};a.builderParams=d;return a};GEarthExtensions.prototype.dom.createFeature_=GEarthExtensions.domBuilder_({propertySpec:{name:GEarthExtensions.AUTO,visibility:GEarthExtensions.AUTO,description:GEarthExtensions.AUTO,snippet:GEarthExtensions.AUTO}});GEarthExtensions.prototype.dom.createPlacemark=GEarthExtensions.domBuilder_({apiInterface:"KmlPlacemark",base:GEarthExtensions.prototype.dom.createFeature_,apiFactoryFn:"createPlacemark",propertySpec:{point:GEarthExtensions.ALLOWED,lineString:GEarthExtensions.ALLOWED,linearRing:GEarthExtensions.ALLOWED,polygon:GEarthExtensions.ALLOWED,model:GEarthExtensions.ALLOWED,geometries:GEarthExtensions.ALLOWED,stockIcon:GEarthExtensions.ALLOWED,icon:GEarthExtensions.ALLOWED,style:GEarthExtensions.ALLOWED,highlightStyle:GEarthExtensions.ALLOWED},constructor:function(d,a){var b=[];if(a.point){b.push(this.dom.createPoint(a.point))}if(a.lineString){b.push(this.dom.createLineString(a.lineString))}if(a.linearRing){b.push(this.dom.createLinearRing(a.linearRing))}if(a.polygon){b.push(this.dom.createPolygon(a.polygon))}if(a.model){b.push(this.dom.createModel(a.model))}if(a.geometries){b=b.concat(a.geometries)}if(b.length>1){d.setGeometry(this.dom.createMultiGeometry(b))}else{if(b.length==1){d.setGeometry(b[0])}}if(a.stockIcon){a.icon=a.icon||{};a.icon.stockIcon=a.stockIcon}if(a.icon){if(!a.style){a.style={}}a.style.icon=a.icon}if(a.style){if(a.highlightStyle){var c=this.pluginInstance.createStyleMap(a.id);if(typeof a.style=="string"){c.setNormalStyleUrl(a.style)}else{c.setNormalStyle(this.dom.createStyle(a.style))}if(typeof a.highlightStyle=="string"){c.setHighlightStyleUrl(a.highlightStyle)}else{c.setHighlightStyle(this.dom.createStyle(a.highlightStyle))}d.setStyleSelector(c)}else{if(typeof a.style=="string"){d.setStyleUrl(a.style)}else{d.setStyleSelector(this.dom.createStyle(a.style))}}}}});GEarthExtensions.prototype.dom.createPointPlacemark=GEarthExtensions.domBuilder_({base:GEarthExtensions.prototype.dom.createPlacemark,defaultProperty:"point"});GEarthExtensions.prototype.dom.createLineStringPlacemark=GEarthExtensions.domBuilder_({base:GEarthExtensions.prototype.dom.createPlacemark,defaultProperty:"lineString"});GEarthExtensions.prototype.dom.createPolygonPlacemark=GEarthExtensions.domBuilder_({base:GEarthExtensions.prototype.dom.createPlacemark,defaultProperty:"polygon"});GEarthExtensions.prototype.dom.createNetworkLink=GEarthExtensions.domBuilder_({apiInterface:"KmlNetworkLink",base:GEarthExtensions.prototype.dom.createFeature_,apiFactoryFn:"createNetworkLink",defaultProperty:"link",propertySpec:{link:GEarthExtensions.ALLOWED,flyToView:GEarthExtensions.AUTO,refreshVisibility:GEarthExtensions.AUTO},constructor:function(b,a){if(a.link){b.setLink(this.dom.createLink(a.link))}}});GEarthExtensions.prototype.dom.createContainer_=GEarthExtensions.domBuilder_({base:GEarthExtensions.prototype.dom.createFeature_,propertySpec:{children:GEarthExtensions.ALLOWED},constructor:function(c,a){if(a.children){for(var b=0;b<a.children.length;b++){c.getFeatures().appendChild(a.children[b])}}}});GEarthExtensions.prototype.dom.createFolder=GEarthExtensions.domBuilder_({apiInterface:"KmlFolder",base:GEarthExtensions.prototype.dom.createContainer_,apiFactoryFn:"createFolder",defaultProperty:"children"});GEarthExtensions.prototype.dom.createDocument=GEarthExtensions.domBuilder_({apiInterface:"KmlDocument",base:GEarthExtensions.prototype.dom.createContainer_,apiFactoryFn:"createDocument",defaultProperty:"children"});GEarthExtensions.prototype.dom.createOverlay_=GEarthExtensions.domBuilder_({base:GEarthExtensions.prototype.dom.createFeature_,propertySpec:{color:GEarthExtensions.ALLOWED,icon:GEarthExtensions.ALLOWED,drawOrder:GEarthExtensions.AUTO},constructor:function(c,a){if(a.color){c.getColor().set(GEarthExtensions.parseColor(a.color))}if(a.icon){var b=this.pluginInstance.createIcon("");c.setIcon(b);if(typeof a.icon=="string"){b.setHref(a.icon)}}}});GEarthExtensions.prototype.dom.createGroundOverlay=GEarthExtensions.domBuilder_({apiInterface:"KmlGroundOverlay",base:GEarthExtensions.prototype.dom.createOverlay_,apiFactoryFn:"createGroundOverlay",defaultProperty:"icon",propertySpec:{box:GEarthExtensions.REQUIRED,altitude:GEarthExtensions.AUTO,altitudeMode:GEarthExtensions.AUTO},constructor:function(a,b){if(b.box){var c=this.pluginInstance.createLatLonBox("");c.setBox(b.box.north,b.box.south,b.box.east,b.box.west,b.box.rotation?b.box.rotation:0);a.setLatLonBox(c)}}});(function(){var b=["Placemark","PointPlacemark","LineStringPlacemark","PolygonPlacemark","Folder","NetworkLink","GroundOverlay","Style"];for(var a=0;a<b.length;a++){GEarthExtensions.prototype.dom["add"+b[a]]=function(c){return function(){var d=this.dom["create"+c].apply(null,arguments);this.pluginInstance.getFeatures().appendChild(d);return d}}(b[a])}})();GEarthExtensions.prototype.dom.createExtrudableGeometry_=GEarthExtensions.domBuilder_({propertySpec:{altitudeMode:GEarthExtensions.AUTO,extrude:GEarthExtensions.AUTO,tessellate:GEarthExtensions.AUTO}});GEarthExtensions.prototype.dom.createPoint=GEarthExtensions.domBuilder_({apiInterface:"KmlPoint",base:GEarthExtensions.prototype.dom.createExtrudableGeometry_,apiFactoryFn:"createPoint",defaultProperty:"point",propertySpec:{point:GEarthExtensions.REQUIRED},constructor:function(b,c){var a=new geo.Point(c.point);b.set(a.lat,a.lng,a.altitude,a.altitudeMode,false,false)}});GEarthExtensions.prototype.dom.createLineString=GEarthExtensions.domBuilder_({apiInterface:"KmlLineString",base:GEarthExtensions.prototype.dom.createExtrudableGeometry_,apiFactoryFn:"createLineString",defaultProperty:"path",propertySpec:{path:GEarthExtensions.REQUIRED},constructor:function(c,b){var a=c.getCoordinates();var f=new geo.Path(b.path);var e=f.numCoords();for(var d=0;d<e;d++){a.pushLatLngAlt(f.coord(d).lat,f.coord(d).lng,f.coord(d).altitude)}}});GEarthExtensions.prototype.dom.createLinearRing=GEarthExtensions.domBuilder_({apiInterface:"KmlLinearRing",base:GEarthExtensions.prototype.dom.createLineString,apiFactoryFn:"createLinearRing",defaultProperty:"path",constructor:function(a,b){}});GEarthExtensions.prototype.dom.createPolygon=GEarthExtensions.domBuilder_({apiInterface:"KmlPolygon",base:GEarthExtensions.prototype.dom.createExtrudableGeometry_,apiFactoryFn:"createPolygon",defaultProperty:"polygon",propertySpec:{polygon:GEarthExtensions.REQUIRED},constructor:function(e,b){var d=new geo.Polygon(b.polygon);e.setOuterBoundary(this.dom.createLinearRing(d.outerBoundary()));if(d.innerBoundaries().length){var a=d.innerBoundaries();for(var c=0;c<a.length;c++){e.getInnerBoundaries().appendChild(this.dom.createLinearRing(a[c]))}}}});GEarthExtensions.prototype.dom.createModel=GEarthExtensions.domBuilder_({apiInterface:"KmlModel",apiFactoryFn:"createModel",defaultProperty:"link",propertySpec:{link:GEarthExtensions.ALLOWED,location:GEarthExtensions.ALLOWED,scale:GEarthExtensions.ALLOWED,orientation:GEarthExtensions.ALLOWED},constructor:function(f,b){if(b.link){f.setLink(this.dom.createLink(b.link))}if(b.location){var a=new geo.Point(b.location);var e=this.pluginInstance.createLocation("");e.setLatLngAlt(a.lat,a.lng,a.altitude);f.setLocation(e);f.setAltitudeMode(a.altitudeMode)}if(b.scale){var c=this.pluginInstance.createScale("");if(typeof b.scale=="number"){c.set(b.scale,b.scale,b.scale)}else{if(geo.util.isArray(b.scale)){c.set(b.scale[0],b.scale[1],b.scale[2])}}f.setScale(c)}if(b.orientation){var d=this.pluginInstance.createOrientation("");if("heading" in b.orientation&&"tilt" in b.orientation&&"roll" in b.orientation){d.set(b.orientation.heading,b.orientation.tilt,b.orientation.roll)}f.setOrientation(d)}}});GEarthExtensions.prototype.dom.createMultiGeometry=GEarthExtensions.domBuilder_({apiInterface:"KmlMultiGeometry",apiFactoryFn:"createMultiGeometry",defaultProperty:"geometries",propertySpec:{geometries:GEarthExtensions.ALLOWED},constructor:function(b,c){var a=b.getGeometries();if(geo.util.isArray(c.geometries)){for(var d=0;d<c.geometries.length;d++){a.appendChild(c.geometries[d])}}}});GEarthExtensions.prototype.dom.createLink=GEarthExtensions.domBuilder_({apiInterface:"KmlLink",apiFactoryFn:"createLink",defaultProperty:"href",propertySpec:{href:GEarthExtensions.AUTO,refreshMode:GEarthExtensions.AUTO,refreshInterval:GEarthExtensions.AUTO,viewRefreshMode:GEarthExtensions.AUTO,viewBoundScale:GEarthExtensions.AUTO}});GEarthExtensions.prototype.dom.createStyle=GEarthExtensions.domBuilder_({apiInterface:["KmlStyle","KmlStyleMap"],apiFactoryFn:"createStyle",propertySpec:{icon:GEarthExtensions.ALLOWED,label:GEarthExtensions.ALLOWED,line:GEarthExtensions.ALLOWED,poly:GEarthExtensions.ALLOWED},constructor:function(f,d){if(d.icon){var g=f.getIconStyle();if(typeof d.icon=="string"){d.icon={href:d.icon}}var e=this.pluginInstance.createIcon("");g.setIcon(e);if("href" in d.icon){e.setHref(d.icon.href)}else{if("stockIcon" in d.icon){e.setHref("http://maps.google.com/mapfiles/kml/paddle/"+d.icon.stockIcon+".png")}else{e.setHref("http://maps.google.com/mapfiles/kml/paddle/wht-blank.png");g.getHotSpot().set(0.5,this.pluginInstance.UNITS_FRACTION,0,this.pluginInstance.UNITS_FRACTION)}}if("scale" in d.icon){g.setScale(d.icon.scale)}if("heading" in d.icon){g.setHeading(d.icon.heading)}if("color" in d.icon){g.getColor().set(GEarthExtensions.parseColor(d.icon.color))}if("hotSpot" in d.icon){this.dom.setVec2(g.getHotSpot(),d.icon.hotSpot)}}if(d.label){var b=f.getLabelStyle();if(typeof d.label=="string"){d.label={color:d.label}}if("scale" in d.label){b.setScale(d.label.scale)}if("color" in d.label){b.getColor().set(GEarthExtensions.parseColor(d.label.color))}}if(d.line){var a=f.getLineStyle();if(typeof d.line=="string"){d.line={color:d.line}}if("width" in d.line){a.setWidth(d.line.width)}if("color" in d.line){a.getColor().set(GEarthExtensions.parseColor(d.line.color))}}if(d.poly){var c=f.getPolyStyle();if(typeof d.poly=="string"){d.poly={color:d.poly}}if("fill" in d.poly){c.setFill(d.poly.fill)}if("outline" in d.poly){c.setOutline(d.poly.outline)}if("color" in d.poly){c.getColor().set(GEarthExtensions.parseColor(d.poly.color))}}}});GEarthExtensions.prototype.dom.clearFeatures=function(){var a=this.pluginInstance.getFeatures();var b;while((b=a.getLastChild())!==null){a.removeChild(b)}};GEarthExtensions.prototype.dom.walk=function(){var a;if(arguments.length==1){if(geo.util.isObjectLiteral(arguments[0])){a=arguments[0]}else{if(geo.util.isFunction(arguments[0])){a={visitCallback:arguments[0]}}else{throw new TypeError("walk requires a visit callback function or options literal as a first parameter")}}}else{throw new Error("walk takes at most 1 arguments")}if(!("visitCallback" in a)){throw new Error("walk requires a visit callback function")}if(!("features" in a)){a.features=true}if(!("geometries" in a)){a.geometries=false}if(!("rootObject" in a)){a.rootObject=this.pluginInstance}var b=function(e,d){var k={current:d,child:d};var f=a.visitCallback.call(e,k);if(!f&&!geo.util.isUndefined(f)){return}var j=null;if("getFeatures" in e){if(a.features){j=e.getFeatures()}}else{if("getGeometry" in e){if(a.geometries&&e.getGeometry()){b(e.getGeometry(),k.child)}}else{if("getGeometries" in e){if(a.geometries){j=e.getGeometries()}}else{if("getInnerBoundaries" in e){if(a.geometries){j=e.getInnerBoundaries()}}}}}if(j&&j.hasChildNodes()){var l=j.getChildNodes();var h=l.getLength();for(var g=0;g<h;g++){var c=l.item(g);b(c,k.child)}}};if(a.rootObject){b(a.rootObject,a.rootContext)}};GEarthExtensions.prototype.dom.getObjectById=function(c,b){b=GEarthExtensions.checkParameters(b,false,{recursive:true,root:this.pluginInstance});if("getId" in b.root&&b.root.getId()==c){return b.root}var a=null;testext_.dom.walk({rootObject:b.root,features:true,geometries:true,visitCallback:function(){if(this.getId()==c){a=this;return false}}})};GEarthExtensions.prototype.dom.removeObject=function(a){var b=a.getParentNode();var c=null;if("getFeatures" in b){c=b.getFeatures()}else{if("getGeometries" in b){c=b.getGeometries()}else{if("getInnerBoundaries" in b){c=b.getInnerBoundaries()}}}c.removeChild(a)};GEarthExtensions.prototype.dom.setVec2=function(d,c){c=GEarthExtensions.checkParameters(c,false,{left:GEarthExtensions.ALLOWED,top:GEarthExtensions.ALLOWED,right:GEarthExtensions.ALLOWED,bottom:GEarthExtensions.ALLOWED});var b=0;var a=this.pluginInstance.UNITS_PIXELS;var f=0;var e=this.pluginInstance.UNITS_PIXELS;if("left" in c){if(typeof c.left=="number"){b=c.left}else{if(typeof c.left=="string"&&c.left[c.left.length-1]=="%"){b=parseFloat(c.left)/100;a=this.pluginInstance.UNITS_FRACTION}else{throw new TypeError("left must be a number or string indicating a percentage")}}}else{if("right" in c){if(typeof c.right=="number"){b=c.right;a=this.pluginInstance.UNITS_INSET_PIXELS}else{if(typeof c.right=="string"&&c.right[c.right.length-1]=="%"){b=1-parseFloat(c.right)/100;a=this.pluginInstance.UNITS_FRACTION}else{throw new TypeError("right must be a number or string indicating a percentage")}}}}if("bottom" in c){if(typeof c.bottom=="number"){f=c.bottom}else{if(typeof c.bottom=="string"&&c.bottom[c.bottom.length-1]=="%"){f=parseFloat(c.bottom)/100;e=this.pluginInstance.UNITS_FRACTION}else{throw new TypeError("bottom must be a number or string indicating a percentage")}}}else{if("top" in c){if(typeof c.top=="number"){f=c.top;e=this.pluginInstance.UNITS_INSET_PIXELS}else{if(typeof c.top=="string"&&c.top[c.top.length-1]=="%"){f=1-parseFloat(c.top)/100;e=this.pluginInstance.UNITS_FRACTION}else{throw new TypeError("top must be a number or string indicating a percentage")}}}}d.set(b,a,f,e)};GEarthExtensions.prototype.dom.createLookAt=GEarthExtensions.domBuilder_({apiInterface:"KmlLookAt",apiFactoryFn:"createLookAt",defaultProperty:"point",propertySpec:{copy:GEarthExtensions.ALLOWED,point:GEarthExtensions.REQUIRED,heading:GEarthExtensions.ALLOWED,tilt:GEarthExtensions.ALLOWED,range:GEarthExtensions.ALLOWED},constructor:function(c,b){var a=new geo.Point(b.point);var e={heading:0,tilt:0,range:1000};if(b.copy){var d=this.util.getLookAt(e.altitudeMode);e.heading=d.getHeading();e.tilt=d.getTilt();e.range=d.getRange()}b=GEarthExtensions.checkParameters(b,true,e);c.set(a.lat,a.lng,a.altitude,a.altitudeMode,b.heading,b.tilt,b.range)}});GEarthExtensions.prototype.dom.createCamera=GEarthExtensions.domBuilder_({apiInterface:"KmlCamera",apiFactoryFn:"createCamera",defaultProperty:"point",propertySpec:{copy:GEarthExtensions.ALLOWED,point:GEarthExtensions.REQUIRED,heading:GEarthExtensions.ALLOWED,tilt:GEarthExtensions.ALLOWED,roll:GEarthExtensions.ALLOWED},constructor:function(d,c){var a=new geo.Point(c.point);var e={heading:0,tilt:0,roll:0};if(c.copy){var b=this.util.getCamera(e.altitudeMode);e.heading=b.getHeading();e.tilt=b.getTilt();e.roll=b.getRoll()}c=GEarthExtensions.checkParameters(c,true,e);d.set(a.lat,a.lng,a.altitude,a.altitudeMode,c.heading,c.tilt,c.roll)}});GEarthExtensions.prototype.edit={isnamespace_:true};(function(){var a=null;function b(e){return function(g){a={placemark:g.getTarget(),dragged:false};var f=e.util.getJsDataValue(a.placemark,"_GEarthExtensions_dragData").draggableOptions||{};if(f.bounce){e.fx.cancel(a.placemark);e.fx.bounce(a.placemark,{phase:1})}google.earth.addEventListener(e.pluginInstance.getWindow(),"mousemove",e.fx.dragListeners_.mouseMove);google.earth.addEventListener(e.pluginInstance.getWindow(),"mouseup",e.fx.dragListeners_.mouseUp)}}function d(e){return function(g){if(a&&g.getDidHitGlobe()){g.preventDefault();var f=a.placemark.getGeometry();f.setLatitude(g.getLatitude());f.setLongitude(g.getLongitude());a.dragged=true}}}function c(e){return function(g){if(a){var f=e.util.getJsDataValue(a.placemark,"_GEarthExtensions_dragData").draggableOptions||{};google.earth.removeEventListener(e.pluginInstance.getWindow(),"mousemove",e.fx.dragListeners_.mouseMove);google.earth.removeEventListener(e.pluginInstance.getWindow(),"mouseup",e.fx.dragListeners_.mouseUp);if(f.bounce){e.fx.cancel(a.placemark);e.fx.bounce(a.placemark,{startAltitude:0,phase:2,repeat:1,dampen:0.3})}if(a.dragged){g.preventDefault();if(f.dropCallback){f.dropCallback.call(a.placemark)}}a=null}}}GEarthExtensions.prototype.edit.makeDraggable=function(f,e){e=GEarthExtensions.checkParameters(e,false,{bounce:true,dropCallback:GEarthExtensions.ALLOWED});if(!this.fx.dragListeners_){this.fx.dragListeners_={mouseDown:b(this),mouseMove:d(this),mouseUp:c(this)}}google.earth.addEventListener(f,"mousedown",this.fx.dragListeners_.mouseDown);this.util.setJsDataValue(f,"_GEarthExtensions_dragData",{draggableOptions:e})};GEarthExtensions.prototype.edit.endDraggable=function(e){google.earth.removeEventListener(e,"mousedown",this.fx.dragListeners_.mouseDown);this.util.clearJsDataValue(e,"_GEarthExtensions_dragInfo")}}());GEarthExtensions.prototype.fx={isnamespace_:true};GEarthExtensions.prototype.fx.getAnimationManager_=function(){if(!this.animationManager_){this.animationManager_=new this.fx.AnimationManager_(this)}return this.animationManager_};GEarthExtensions.prototype.fx.AnimationManager_=GEarthExtensions.createClass_(function(a){this.extInstance=a;this.animations_=[];this.running_=false;this.globalTime_=0});GEarthExtensions.prototype.fx.AnimationManager_.prototype.startAnimation=function(a){this.animations_.push({obj:a,startGlobalTime:this.globalTime_});this.start_()};GEarthExtensions.prototype.fx.AnimationManager_.prototype.stopAnimation=function(b){for(var a=0;a<this.animations_.length;a++){if(this.animations_[a].obj==b){this.animations_.splice(a,1);return}}};GEarthExtensions.prototype.fx.AnimationManager_.prototype.start_=function(){if(this.running_){return}this.startTimeStamp_=Number(new Date());this.tick_();for(var a=0;a<this.animations_.length;a++){this.animations_[a].obj.renderFrame(0)}var b=this;this.frameendListener_=function(){b.tick_()};this.tickInterval_=window.setInterval(this.frameendListener_,100);google.earth.addEventListener(this.extInstance.pluginInstance,"frameend",this.frameendListener_);this.running_=true};GEarthExtensions.prototype.fx.AnimationManager_.prototype.stop_=function(){if(!this.running_){return}google.earth.removeEventListener(this.extInstance.pluginInstance,"frameend",this.frameendListener_);this.frameendListener_=null;window.clearInterval(this.tickInterval_);this.tickInterval_=null;this.running_=false;this.globalTime_=0};GEarthExtensions.prototype.fx.AnimationManager_.prototype.tick_=function(){if(!this.running_){return}this.globalTime_=Number(new Date())-this.startTimeStamp_;this.renderCurrentFrame_()};GEarthExtensions.prototype.fx.AnimationManager_.prototype.renderCurrentFrame_=function(){for(var a=this.animations_.length-1;a>=0;a--){var c=this.animations_[a];var b=this;c.obj.renderFrame(this.globalTime_-c.startGlobalTime)}if(this.animations_.length===0){this.stop_()}};GEarthExtensions.prototype.fx.Animation_=GEarthExtensions.createClass_(function(){});GEarthExtensions.prototype.fx.Animation_.prototype.start=function(){this.extInstance.fx.getAnimationManager_().startAnimation(this)};GEarthExtensions.prototype.fx.Animation_.prototype.stop=function(){this.extInstance.fx.getAnimationManager_().stopAnimation(this);this.renderFrame(0)};GEarthExtensions.prototype.fx.Animation_.prototype.renderFrame=function(a){};GEarthExtensions.prototype.fx.GenericSimpleAnimation=GEarthExtensions.createClass_([GEarthExtensions.prototype.fx.Animation_],function(b,c,a){this.extInstance=b;this.duration=c;this.renderFn=a});GEarthExtensions.prototype.fx.GenericSimpleAnimation.prototype.renderFrame=function(a){if(a>this.duration){this.stop();this.renderFn.call(this,this.duration);return}this.renderFn.call(this,a)};GEarthExtensions.prototype.fx.bounce=function(e,d){this.fx.rewind(e);d=GEarthExtensions.checkParameters(d,false,{duration:250,startAltitude:GEarthExtensions.ALLOWED,altitude:this.util.getCamera().getAltitude()/5,phase:GEarthExtensions.ALLOWED,repeat:0,dampen:1,callback:GEarthExtensions.ALLOWED});if(!"getGeometry" in e||!e.getGeometry()||e.getGeometry().getType()!="KmlPoint"){throw new Error("Placemark must be a KmlPoint geometry")}var a=e.getGeometry();if(a.getAltitudeMode()==this.pluginInstance.ALTITUDE_CLAMP_TO_GROUND){a.setAltitude(0);a.setAltitudeMode(this.pluginInstance.ALTITUDE_RELATIVE_TO_GROUND)}var g=a.getAltitude();if("startAltitude" in d){g=d.startAltitude}var c,b;var f=this;c=function(){f.fx.animateProperty(a,"altitude",{duration:d.duration/2,end:g+d.altitude,easing:"out",callback:b})};b=function(){f.fx.animateProperty(a,"altitude",{duration:d.duration/2,end:g,easing:"in",callback:function(){if(d.repeat>=1){--d.repeat;d.altitude*=d.dampen;d.phase=0;f.fx.bounce(e,d)}else{if(d.callback){d.callback.call(e)}}}})};if(d.phase===1){b=null;c.call()}else{if(d.phase===2){b.call()}else{c.call()}}};GEarthExtensions.prototype.fx.cancel=function(b){var c=this.util.getJsDataValue(b,"_GEarthExtensions_anim")||[];for(var a=0;a<c.length;a++){c[a].stop()}};GEarthExtensions.prototype.fx.rewind=function(b){var c=this.util.getJsDataValue(b,"_GEarthExtensions_anim")||[];for(var a=0;a<c.length;a++){c[a].rewind()}};GEarthExtensions.prototype.fx.animateProperty=function(e,d,b){b=GEarthExtensions.checkParameters(b,false,{duration:500,start:GEarthExtensions.ALLOWED,end:GEarthExtensions.ALLOWED,delta:GEarthExtensions.ALLOWED,easing:"none",callback:GEarthExtensions.ALLOWED});if(typeof b.easing=="string"){b.easing={none:function(g){return g},"in":function(g){return g*g*g},out:function(h){var i=h*h;var g=i*h;return g-3*i+3*h},both:function(h){var i=h*h;var g=i*h;return 6*g*i-15*i*i+10*g}}[b.easing]}var a=function(){return e["get"+d.substr(0,1).toUpperCase()+d.substr(1)].call(e)};var f=function(g){return e["set"+d.substr(0,1).toUpperCase()+d.substr(1)].call(e,g)};if(!isFinite(b.start)&&!isFinite(b.end)){if(!isFinite(b.delta)){b.delta=0}b.start=a();b.end=a()+b.delta}else{if(!isFinite(b.start)){b.start=a()}if(!isFinite(b.end)){b.end=a()}}var c=new this.fx.GenericSimpleAnimation(this,b.duration,function(g){f(b.start+b.easing.call(null,1*g/b.duration)*(b.end-b.start));if(g==b.duration&&b.callback){b.callback.call(e)}});c.start()};GEarthExtensions.prototype.util={isnamespace_:true};(function(){var c={};function e(){var g=[],h="0123456789ABCDEF",f=0;for(f=0;f<36;f++){g[f]=Math.floor(Math.random()*16)}g[14]=4;g[19]=(g[19]&3)|8;for(f=0;f<36;f++){g[f]=h[g[f]]}g[8]=g[13]=g[18]=g[23]="-";return g.join("")}var b=/##JSTAG:([0-9a-f\-]+)##/i;function d(g){var f=g.getSnippet().match(b);if(f){f=f[1]}return f}function a(g,f){if(d(g)){g.setSnippet(g.getSnippet().replace(b,""))}if(f){g.setSnippet("##JSTAG:"+f+"##"+g.getSnippet())}}GEarthExtensions.prototype.util.hasJsData=function(g){var f=d(g);return(f&&f in c)?true:false};GEarthExtensions.prototype.util.clearAllJsData=function(g){var f=d(g);if(f){a(g,null);delete c[f]}};GEarthExtensions.prototype.util.getJsDataValue=function(h,g){var f=d(h);if(f&&f in c&&g in c[f]){return c[f][g]}return undefined};GEarthExtensions.prototype.util.setJsDataValue=function(h,g,i){var f=d(h);if(!f){f=null;while(!f||f in c){f=e()}a(h,f);c[f]={}}c[f][g]=i};GEarthExtensions.prototype.util.clearJsDataValue=function(i,h){var f=d(i);if(f&&f in c&&h in c[f]){delete c[f][h];for(var g in c[f]){return}this.util.clearAllJsData(i)}}}());(function(){GEarthExtensions.prototype.util.serializeView=function(){var g=this.pluginInstance.getView().copyAsCamera(this.pluginInstance.ALTITUDE_ABSOLUTE);return encodeCamera_({lat:g.getLatitude(),lng:g.getLongitude(),altitude:g.getAltitude(),heading:g.getHeading(),tilt:g.getTilt(),roll:g.getRoll()})};GEarthExtensions.prototype.util.deserializeView=function(i){var h=decodeCamera_(i);var g=this.pluginInstance.createCamera("");g.set(h.lat,h.lng,h.altitude,this.pluginInstance.ALTITUDE_ABSOLUTE,h.heading,h.tilt,h.roll);this.pluginInstance.getView().setAbstractView(g)};GEarthExtensions.prototype.util.encodeCamera_=function(h){var g=1073741824;var i=Math.floor(h.altitude*100000);return c([Math.floor(b(h.lat)*100000),Math.floor(b(h.lng)*100000),Math.floor(i/g),i%g,Math.floor(f(h.heading)*100000),Math.floor(f(h.tilt)*100000),Math.floor(f(h.roll)*100000)])};GEarthExtensions.prototype.util.decodeCamera_=function(h){var i=1073741824;var g=a(h);return{lat:g[0]*0.00001,lng:g[1]*0.00001,altitude:(i*g[2]+g[3])*0.00001,heading:g[4]*0.00001,tilt:g[5]*0.00001,roll:g[6]*0.00001}};var e="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_";function c(g){var j="";for(var h=0;h<g.length;h++){j+=d(g[h])}return j}function f(g){while(g<0){g+=360}return g%360}function b(g){g=f(g);return(g>180)?g-360:g}function d(h){var i=h<<1;if(h<0){i=~(i)}var g="";while(i>=32){g+=e[32|(i&31)];i>>=5}g+=e[i];return g}function a(h){var j=h.length;var i=0;var k=[];var l=0;var n=0;while(i<j){var o;var g=0;var p=0;do{o=e.indexOf(h.charAt(i++));p|=(o&31)<<g;g+=5}while(o>=32);k.push(((p&1)?~(p>>1):(p>>1)))}return k}}());GEarthExtensions.prototype.util.lookAt=function(){this.pluginInstance.getView().setAbstractView(this.dom.createLookAt.apply(null,arguments))};GEarthExtensions.prototype.util.getLookAt=function(a){if(geo.util.isUndefined(a)){a=this.pluginInstance.ALTITUDE_ABSOLUTE}return this.pluginInstance.getView().copyAsLookAt(a)};GEarthExtensions.prototype.util.getCamera=function(a){if(geo.util.isUndefined(a)){a=this.pluginInstance.ALTITUDE_ABSOLUTE}return this.pluginInstance.getView().copyAsCamera(a)};GEarthExtensions.prototype.util.displayKml=function(b,a){google.earth.fetchKml(this.pluginInstance,function(c){if(c){this.pluginInstance.getFeatures().appendChild(c)}})};GEarthExtensions.prototype.util.displayKmlString=function(c,a){var b=this.pluginInstance.parseKml(c);this.pluginInstance.getFeatures().appendChild(b)};